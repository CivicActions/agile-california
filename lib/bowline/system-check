#!/usr/bin/env bash

echo_check () {
  echo -e "\n\033[34m# Check: $1 \033[m"
}

echo_pass () {
  echo -e "\033[32m## PASS: $1 \033[m"
}

echo_fail () {
  echo -e "\033[31m!! FAIL: $1 \033[m"
}

install_presetup () {
  echo "Would you like to install the prerequisites [y/n]?"
  read response
  response="$(echo ${response} | tr 'A-Z' 'a-z')"
  [ "${response}" = "n" ] && exit 1
  case "$OSTYPE" in
    linux*)
      echo "You are running linux. There are no further prerequisites."
      ;;
    darwin*)
      bash <(curl -s https://raw.githubusercontent.com/blinkreaction/boot2docker-vagrant/master/presetup-mac.sh)
      ;;
    *)
      bash <(curl -s https://raw.githubusercontent.com/blinkreaction/boot2docker-vagrant/master/presetup-win.sh)
      ;;
  esac
}

install_docker_vagrant () {
  cd "${GIT_ROOT}/.."
  echo "Ready to install the vagrant docker virtual machine in the $PWD directory [y/n]?"
  read response
  response="$(echo ${response} | tr 'A-Z' 'a-z')"
  [ "${response}" = "n" ] && exit 1
  bash <(curl -s https://raw.githubusercontent.com/blinkreaction/boot2docker-vagrant/develop/setup.sh)
  cd "${GIT_ROOT}"
}


echo -e "\n### Running checks on docker system ###\n"

echo -e "OS Type: $OSTYPE"

echo_check "Docker client command"
CHECK=$(command -v docker)
if [ ! "$CHECK" ];then
  echo_fail "Looks like you don't have docker installed."
  case "$OSTYPE" in
    linux*)
      echo "Install docker as described here: https://docs.docker.com/"
      exit 1
      ;;
    *)
      install_presetup
      echo "Install complete. Please review the above for errors then re-run system-check."
      exit 1
      ;;
  esac
fi
echo_pass "$CHECK"

echo_check "Vagrant"
# The FORCE_VAGRANT var is for testing vagrant on Linux.
# Run 'export FORCE_VAGRANT=yes' to force check to use vagrant.
if [[ "$OSTYPE" == linux* && -z "$DOCKER_HOST" && -z "$FORCE_VAGRANT" ]]; then
  echo_pass "Using local linux host. Vagrant not needed."
else
  echo_check "Checking vagrant status"
  VS=$(vagrant status | grep boot2docker)
  EXIT=$?
  echo -e "$VS"
  if [ "$EXIT" != "0" ];then
    echo -e "Exit status: $EXIT"
    echo_fail "Vagrant boot2docker does not appear to be installed"
    install_docker_vagrant
    exit 1
  elif [ ! "$(echo $VS|grep running)" ];then
    echo_fail "Vagrant VM not running"
    vagrant up
    exit 1
  else
    echo_pass "Vagrant VM running"
  fi
  echo_check "Docker environment variables"
  env | grep -i docker
  if [ -z "$DOCKER_HOST" ] || [ "$DOCKER_HOST" != "tcp://localhost:2375" ]; then
    echo_fail "DOCKER_HOST does not look correct: ${DOCKER_HOST}"
    echo "Enter the following command and try again:"
    echo "export DOCKER_HOST=\"tcp://localhost:2375\""
    exit 1
  else
    echo_pass "Docker host set to ${DOCKER_HOST}"
  fi
fi

echo_check "Connection to docker host"
DOCKER_VERSION=$(docker version)
EXIT=$?
echo -e "$DOCKER_VERSION"
if [ "$EXIT" != "0" ];then
  echo -e "Exit status: $EXIT"
  echo_fail "Not connected to a docker host"
  install_docker_vagrant
  exit 1
fi
echo_pass "Connected to host"

echo_check "Subnetwork route"
if [ -n "$(command -v netstat)" ];then
  CHECK=$(netstat -nr|grep 172)
else
  CHECK=$(ip route|grep 172)
fi
echo -e "${CHECK}"
if [ -z "${CHECK}" ];then
  echo_fail "Subnet route not established"
  echo "Try the following command to add route to docker containers:"
  if [[ "$OSTYPE" == linux* ]];then
    echo "  sudo route add -net 172.17.0.0 netmask 255.255.0.0 gw 192.168.10.10"
  else
    echo "  sudo route -n add 172.0.0.0/8 192.168.10.10"
  fi
else
  echo_pass "Subnet route established"
fi

echo_check "Drupal connection to database container"
CHECK=$(drush sql-connect)
echo -e "${CHECK}"
if [ -z "$(echo ${CHECK} | grep dbhost)" ];then
  echo_fail "Drupal not connected to database"
  echo "Try running 'settings_init' to resolve"
  exit 1
fi
echo_pass "Connected"

echo -e "\nChecks complete.\n"

